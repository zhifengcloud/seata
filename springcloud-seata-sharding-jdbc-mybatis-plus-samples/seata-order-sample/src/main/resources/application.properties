#订单微服务服务信息
server.port=8001
spring.application.name=order-server
spring.contextpa

#订单微服务注册中心
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
spring.cloud.nacos.discovery.group=DEFAULT_GROUP

#sharding-jdbc数据源配置
spring.shardingsphere.datasource.names=ds0,ds1

spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://127.0.0.1:3306/seata_order_0?serverTimezone=UTC&characterEncoding=utf8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123123

spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://127.0.0.1:3306/seata_order_1?serverTimezone=UTC&characterEncoding=utf8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123123

#sharding-jdbc分片配置
spring.shardingsphere.sharding.tables.order_info.actual-data-nodes=ds$->{0..1}.order_info_$->{0..2}

# 配置分库策略
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id

# 配置分表策略
spring.shardingsphere.sharding.tables.order_info.table-strategy.inline.sharding-column=id

# 配置库和表分片算法
spring.shardingsphere.sharding.tables.order_info.table-strategy.inline.algorithm-expression=order_info_$->{id % 3}
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{id % 2}

#sharding-jdbc显示最终SQL
spring.shardingsphere.props.sql.show=true

#mybatis-plus配置
mybatis-plus.configuration.map-underscore-to-camel-case=true
logging.level.io.seata=debug

# SEATA配置
seata.application-id=order-server
seata.tx-service-group=sharding_tx_group
seata.config.type=nacos
seata.config.nacos.server-addr=127.0.0.1:8848
seata.config.nacos.group=SEATA_GROUP
seata.config.nacos.username=nacos
seata.config.nacos.password=nacos
seata.enable-auto-data-source-proxy=false

spring.main.allow-bean-definition-overriding=true


# 配置 t_order 表规则
#spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order$->{0..1}

# 配置分库策略
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=database_inline

# 配置分表策略
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=table_inline

# 配置 分片算法  可以和上面的对比
#spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.props.algorithm-expression=ds_${user_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.table_inline.props.algorithm-expression=t_order_${order_id % 2}